<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\basic-bldc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\basic-bldc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 644]: Last Updated: Sat Jul 02 23:50:16 2011
<BR><P>
<H3>Maximum Stack Usage =         96 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MainMillisecondTick &rArr; MainStartupHandler &rArr; MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[14]">Reset_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[18]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SysCtlDelay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">ADC0IntHandler</a> from adc_ctrl.o(i.ADC0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[0]">ADC0IntIdle</a> from adc_ctrl.o(i.ADC0IntIdle) referenced 2 times from adc_ctrl.o(.data)
 <LI><a href="#[11]">ADC0IntTrap</a> from adc_ctrl.o(i.ADC0IntTrap) referenced from adc_ctrl.o(i.ADCConfigure)
 <LI><a href="#[3]">FaultISR</a> from main.o(i.FaultISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">GPIOBIntHandler</a> from hall_ctrl.o(i.GPIOBIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">GPIOCIntHandler</a> from speed_sense.o(i.GPIOCIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">IntDefaultHandler</a> from main.o(i.IntDefaultHandler) referenced 40 times from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">MainMillisecondTick</a> from main.o(i.MainMillisecondTick) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[9]">MainWaveformTick</a> from main.o(i.MainWaveformTick) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2]">NmiSR</a> from main.o(i.NmiSR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">PWM0IntHandler</a> from pwm_ctrl.o(i.PWM0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">QEIIntHandler</a> from speed_sense.o(i.QEIIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[14]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">SysTickIntHandler</a> from ui.o(i.SysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[e]">Timer0AIntHandler</a> from main.o(i.Timer0AIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">Timer1AIntHandler</a> from ui.o(i.Timer1AIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[13]">UIButtonHold</a> from ui.o(i.UIButtonHold) referenced from ui.o(.constdata)
 <LI><a href="#[12]">UIButtonPress</a> from ui.o(i.UIButtonPress) referenced from ui.o(.constdata)
 <LI><a href="#[d]">WatchdogIntHandler</a> from main.o(i.WatchdogIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[10]">main</a> from main.o(i.main) referenced from entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[14]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))

<P><STRONG><a name="[15]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[8e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[16]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[53]"></a>MainLongMul</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedController
</UL>

<P><STRONG><a name="[18]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[42]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[90]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[91]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[75]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlSleep
</UL>

<P><STRONG><a name="[92]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[93]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[17]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[94]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>ADC0IntHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc_ctrl.o(i.ADC0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC0IntHandler &rArr; UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetTicks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADCConfigure</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, adc_ctrl.o(i.ADCConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADCConfigure &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDisable
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntEnable
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[27]"></a>ADCInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, adc_ctrl.o(i.ADCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADCInit &rArr; ADCConfigure &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlADCSpeedSet
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>ADCIntDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[25]"></a>ADCIntEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[29]"></a>ADCProcessorTrigger</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCReadAnalog
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[2a]"></a>ADCReadAnalog</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc_ctrl.o(i.ADCReadAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCReadAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[23]"></a>ADCSequenceConfigure</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[22]"></a>ADCSequenceDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[24]"></a>ADCSequenceEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[1c]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrap
</UL>

<P><STRONG><a name="[2b]"></a>ADCTickHandler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, adc_ctrl.o(i.ADCTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADCTickHandler &rArr; UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[2c]"></a>BrakeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, brake.o(i.BrakeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BrakeInit &rArr; GPIOPinTypeGPIOOutputOD
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>BrakeTick</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, brake.o(i.BrakeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BrakeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[3]"></a>FaultISR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.FaultISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FaultISR &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>GPIOBIntHandler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, hall_ctrl.o(i.GPIOBIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOBIntHandler &rArr; TrapModulate &rArr; PWMOutputTrapezoid
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>GPIOCIntHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, speed_sense.o(i.GPIOCIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOCIntHandler &rArr; SpeedNewValue
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedNewValue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
</UL>

<P><STRONG><a name="[40]"></a>GPIOIntTypeSet</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallInit
</UL>

<P><STRONG><a name="[39]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
</UL>

<P><STRONG><a name="[33]"></a>GPIOPinIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOCIntHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
</UL>

<P><STRONG><a name="[3e]"></a>GPIOPinIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
</UL>

<P><STRONG><a name="[34]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
</UL>

<P><STRONG><a name="[37]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallInit
</UL>

<P><STRONG><a name="[3a]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[2d]"></a>GPIOPinTypeGPIOOutputOD</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutputOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutputOD
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeInit
</UL>

<P><STRONG><a name="[3b]"></a>GPIOPinTypePWM</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[3c]"></a>GPIOPinTypeQEI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeQEI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeQEI
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[2e]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UILEDBlink
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeTick
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeInit
</UL>

<P><STRONG><a name="[3d]"></a>HallConfigure</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hall_ctrl.o(i.HallConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HallConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[3f]"></a>HallInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hall_ctrl.o(i.HallInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HallInit &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>HallTickHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hall_ctrl.o(i.HallTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HallTickHandler &rArr; UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[4]"></a>IntDefaultHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.IntDefaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IntDefaultHandler &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IntDisable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOCIntHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMReducePeriodCount
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdatePAdjI
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdateFAdjI
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetPWMFrequency
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[26]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMReducePeriodCount
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdatePAdjI
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdateFAdjI
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetPWMFrequency
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[30]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>

<P><STRONG><a name="[8b]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>MainClearFaults</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.MainClearFaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainClearFaults &rArr; UIFaultLEDBlink &rArr; UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>MainEmergencyStop</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.MainEmergencyStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainCheckFaults
</UL>

<P><STRONG><a name="[4f]"></a>MainIsFaulted</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.MainIsFaulted))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
</UL>

<P><STRONG><a name="[1b]"></a>MainIsReverse</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.MainIsReverse))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrap
</UL>

<P><STRONG><a name="[1d]"></a>MainIsRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.MainIsRunning))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIButtonPress
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrap
</UL>

<P><STRONG><a name="[1e]"></a>MainIsStartup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.MainIsStartup))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrap
</UL>

<P><STRONG><a name="[a]"></a>MainMillisecondTick</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(i.MainMillisecondTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MainMillisecondTick &rArr; MainStartupHandler &rArr; MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedController
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainCheckFaults
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>MainRun</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main.o(i.MainRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MainRun &rArr; PWMOutputPrecharge &rArr; PWMClearDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsFaulted
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIButtonPress
</UL>

<P><STRONG><a name="[45]"></a>MainSetFault</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.MainSetFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainSetFault &rArr; UIFaultLEDBlink &rArr; UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainCheckFaults
</UL>

<P><STRONG><a name="[51]"></a>MainSetPWMFrequency</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.MainSetPWMFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MainSetPWMFrequency &rArr; PWMSetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[85]"></a>MainSetPower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.MainSetPower))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[84]"></a>MainSetSpeed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.MainSetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[4c]"></a>MainSpeedController</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.MainSpeedController))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MainSpeedController
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLongMul
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[54]"></a>MainStop</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.MainStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MainStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIButtonPress
</UL>

<P><STRONG><a name="[55]"></a>MainUpdateFAdjI</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.MainUpdateFAdjI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainUpdateFAdjI
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[56]"></a>MainUpdatePAdjI</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.MainUpdatePAdjI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainUpdatePAdjI
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[9]"></a>MainWaveformTick</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.MainWaveformTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MainWaveformTick &rArr; PWMSetDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMReducePeriodCount
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGetPeriodCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NmiSR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.NmiSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NmiSR &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PWM0IntHandler</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, pwm_ctrl.o(i.PWM0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PWM0IntHandler &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenIntClear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMReducePeriodCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>PWMClearDeadBand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pwm_ctrl.o(i.PWMClearDeadBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMClearDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDeadBandDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[5e]"></a>PWMDeadBandDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(i.PWMDeadBandDisable))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClearDeadBand
</UL>

<P><STRONG><a name="[6a]"></a>PWMDeadBandEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMDeadBandEnable))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDeadBand
</UL>

<P><STRONG><a name="[60]"></a>PWMGenConfigure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[61]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[59]"></a>PWMGenIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i.PWMGenIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[63]"></a>PWMGenIntTrigEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenIntTrigEnable))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[5a]"></a>PWMGenPeriodSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[57]"></a>PWMGetPeriodCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm_ctrl.o(i.PWMGetPeriodCount))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainWaveformTick
</UL>

<P><STRONG><a name="[5f]"></a>PWMInit</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWMInit &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSyncTimeBase
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputInvert
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputFault
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenIntTrigEnable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenIntClear
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClearDeadBand
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>PWMOutputFault</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputFault))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[65]"></a>PWMOutputInvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputInvert))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[31]"></a>PWMOutputOff</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMOutputOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClearDeadBand
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntHandler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedHandler
</UL>

<P><STRONG><a name="[50]"></a>PWMOutputPrecharge</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMOutputPrecharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWMOutputPrecharge &rArr; PWMClearDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSyncUpdate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClearDeadBand
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsFaulted
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
</UL>

<P><STRONG><a name="[5c]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[68]"></a>PWMOutputTrapezoid</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMOutputTrapezoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMOutputTrapezoid
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsFaulted
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
</UL>

<P><STRONG><a name="[66]"></a>PWMPulseWidthSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
</UL>

<P><STRONG><a name="[58]"></a>PWMReducePeriodCount</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwm_ctrl.o(i.PWMReducePeriodCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMReducePeriodCount
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainWaveformTick
</UL>

<P><STRONG><a name="[69]"></a>PWMSetDeadBand</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pwm_ctrl.o(i.PWMSetDeadBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMSetDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDeadBandEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[48]"></a>PWMSetDutyCycle</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMSetDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMSetDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainWaveformTick
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
</UL>

<P><STRONG><a name="[52]"></a>PWMSetFrequency</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pwm_ctrl.o(i.PWMSetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMSetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetPWMFrequency
</UL>

<P><STRONG><a name="[83]"></a>PWMSetMinPulseWidth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm_ctrl.o(i.PWMSetMinPulseWidth))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[62]"></a>PWMSyncTimeBase</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(i.PWMSyncTimeBase))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[67]"></a>PWMSyncUpdate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(i.PWMSyncUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
</UL>

<P><STRONG><a name="[6e]"></a>QEIConfigure</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, qei.o(i.QEIConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[70]"></a>QEIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qei.o(i.QEIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[6b]"></a>QEIIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qei.o(i.QEIIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntHandler
</UL>

<P><STRONG><a name="[72]"></a>QEIIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qei.o(i.QEIIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[b]"></a>QEIIntHandler</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, speed_sense.o(i.QEIIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QEIIntHandler &rArr; SpeedNewValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIVelocityGet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntClear
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedNewValue
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>QEIVelocityConfigure</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, qei.o(i.QEIVelocityConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[71]"></a>QEIVelocityEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qei.o(i.QEIVelocityEnable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[6c]"></a>QEIVelocityGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qei.o(i.QEIVelocityGet))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntHandler
</UL>

<P><STRONG><a name="[6d]"></a>SpeedSenseInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, speed_sense.o(i.SpeedSenseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpeedSenseInit &rArr; GPIOPinTypeQEI
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIVelocityEnable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIVelocityConfigure
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntEnable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIEnable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIConfigure
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>SysCtlADCSpeedSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlADCSpeedSet))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[73]"></a>SysCtlClockSet</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>SysCtlLDOSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlLDOSet))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>SysCtlPeripheralClockGating</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralClockGating))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>SysCtlPeripheralSleepEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralSleepEnable))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>SysCtlSleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlSleep))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[7d]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[5]"></a>SysTickIntHandler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ui.o(i.SysTickIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysTickIntHandler &rArr; ADCTickHandler &rArr; UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIOnboardSwitchDebouncer
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallTickHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTickHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCReadAnalog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[e]"></a>Timer0AIntHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.Timer0AIntHandler))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Timer1AIntHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui.o(i.Timer1AIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1AIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TimerConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[77]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1AIntHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0AIntHandler
</UL>

<P><STRONG><a name="[81]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[79]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetTicks
</UL>

<P><STRONG><a name="[35]"></a>TrapModulate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, trapmod.o(i.TrapModulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TrapModulate &rArr; PWMOutputTrapezoid
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsReverse
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
</UL>

<P><STRONG><a name="[12]"></a>UIButtonPress</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ui.o(i.UIButtonPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UIButtonPress &rArr; MainStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>UIFaultLEDBlink</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ui.o(i.UIFaultLEDBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIFaultLEDBlink &rArr; UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UILEDBlink
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetFault
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainClearFaults
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>

<P><STRONG><a name="[1a]"></a>UIGetTicks</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ui.o(i.UIGetTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallTickHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTickHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntHandler
</UL>

<P><STRONG><a name="[7a]"></a>UIInit</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, ui.o(i.UIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UIInit &rArr; ADCConfigure &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIOnboardInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetMinPulseWidth
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDeadBand
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdatePAdjI
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdateFAdjI
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetSpeed
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetPower
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetPWMFrequency
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainClearFaults
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>UIOnboardInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ui_onboard.o(i.UIOnboardInit))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[76]"></a>UIOnboardSwitchDebouncer</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, ui_onboard.o(i.UIOnboardSwitchDebouncer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UIOnboardSwitchDebouncer
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[47]"></a>UIRunLEDBlink</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ui.o(i.UIRunLEDBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIRunLEDBlink &rArr; UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UILEDBlink
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedHandler
</UL>

<P><STRONG><a name="[8d]"></a>WatchdogEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogEnable))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>WatchdogIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntHandler
</UL>

<P><STRONG><a name="[d]"></a>WatchdogIntHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.WatchdogIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WatchdogIntHandler &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntClear
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetFault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>WatchdogReloadSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogReloadSet))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
</UL>

<P><STRONG><a name="[8c]"></a>WatchdogResetEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogResetEnable))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[98]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[99]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10]"></a>main</STRONG> (Thumb, 402 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = main &rArr; PWMInit &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogResetEnable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlSleep
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralSleepEnable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralClockGating
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlLDOSet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainClearFaults
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallInit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[0]"></a>ADC0IntIdle</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, adc_ctrl.o(i.ADC0IntIdle))
<BR>[Address Reference Count : 1]<UL><LI> adc_ctrl.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ADC0IntTrap</STRONG> (Thumb, 840 bytes, Stack size 32 bytes, adc_ctrl.o(i.ADC0IntTrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC0IntTrap &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsStartup
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsReverse
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_ctrl.o(i.ADCConfigure)
</UL>
<P><STRONG><a name="[43]"></a>MainCheckFaults</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, main.o(i.MainCheckFaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MainCheckFaults &rArr; MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetFault
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[49]"></a>MainPrechargeHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(i.MainPrechargeHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MainPrechargeHandler &rArr; GPIOBIntHandler &rArr; TrapModulate &rArr; PWMOutputTrapezoid
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[4b]"></a>MainSpeedHandler</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, main.o(i.MainSpeedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MainSpeedHandler &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[4a]"></a>MainStartupHandler</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, main.o(i.MainStartupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MainStartupHandler &rArr; MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0AIntHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetFault
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[5b]"></a>PWMUpdateDutyCycle</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, pwm_ctrl.o(i.PWMUpdateDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSyncUpdate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[36]"></a>SpeedNewValue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, speed_sense.o(i.SpeedNewValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpeedNewValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOCIntHandler
</UL>

<P><STRONG><a name="[13]"></a>UIButtonHold</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ui.o(i.UIButtonHold))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>UILEDBlink</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ui.o(i.UILEDBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
