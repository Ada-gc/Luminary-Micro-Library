<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\qs-bldc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\qs-bldc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 644]: Last Updated: Sat Jul 02 23:45:36 2011
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lwIPEthernetIntHandler &rArr; stellarisif_interrupt &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[38]">Reset_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6a]">EthernetPHYRead</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">EthernetPHYRead</a><BR>
 <LI><a href="#[3c]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">SysCtlDelay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">ADC0IntHandler</a> from adc_ctrl.o(i.ADC0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[0]">ADC0IntIdle</a> from adc_ctrl.o(i.ADC0IntIdle) referenced 2 times from adc_ctrl.o(.data)
 <LI><a href="#[0]">ADC0IntIdle</a> from adc_ctrl.o(i.ADC0IntIdle) referenced from adc_ctrl.o(i.ADCConfigure)
 <LI><a href="#[15]">ADC0IntSine</a> from adc_ctrl.o(i.ADC0IntSine) referenced from adc_ctrl.o(i.ADCConfigure)
 <LI><a href="#[16]">ADC0IntSineLinear</a> from adc_ctrl.o(i.ADC0IntSineLinear) referenced from adc_ctrl.o(i.ADCConfigure)
 <LI><a href="#[13]">ADC0IntTrap</a> from adc_ctrl.o(i.ADC0IntTrap) referenced from adc_ctrl.o(i.ADCConfigure)
 <LI><a href="#[14]">ADC0IntTrapLinear</a> from adc_ctrl.o(i.ADC0IntTrapLinear) referenced from adc_ctrl.o(i.ADCConfigure)
 <LI><a href="#[10]">CANIntHandler</a> from ui_can.o(i.CANIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">FaultISR</a> from main.o(i.FaultISR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">GPIOBIntHandler</a> from hall_ctrl.o(i.GPIOBIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[7]">GPIOCIntHandler</a> from speed_sense.o(i.GPIOCIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[4]">IntDefaultHandler</a> from main.o(i.IntDefaultHandler) referenced 38 times from startup_rvmdk.o(RESET)
 <LI><a href="#[30]">MainClearFaults</a> from main.o(i.MainClearFaults) referenced from ui.o(.constdata)
 <LI><a href="#[a]">MainMillisecondTick</a> from main.o(i.MainMillisecondTick) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[33]">MainSetPower</a> from main.o(i.MainSetPower) referenced from ui.o(.constdata)
 <LI><a href="#[25]">MainSetSpeed</a> from main.o(i.MainSetSpeed) referenced 2 times from ui.o(.constdata)
 <LI><a href="#[9]">MainWaveformTick</a> from main.o(i.MainWaveformTick) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2]">NmiSR</a> from main.o(i.NmiSR) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">PWM0IntHandler</a> from pwm_ctrl.o(i.PWM0IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[2c]">PWMSetDeadBand</a> from pwm_ctrl.o(i.PWMSetDeadBand) referenced from ui.o(.constdata)
 <LI><a href="#[2e]">PWMSetMinPulseWidth</a> from pwm_ctrl.o(i.PWMSetMinPulseWidth) referenced from ui.o(.constdata)
 <LI><a href="#[b]">QEIIntHandler</a> from speed_sense.o(i.QEIIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[38]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">SysTickIntHandler</a> from ui.o(i.SysTickIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[e]">Timer0AIntHandler</a> from main.o(i.Timer0AIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[f]">Timer1AIntHandler</a> from ui.o(i.Timer1AIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[37]">UIButtonHold</a> from ui.o(i.UIButtonHold) referenced from ui.o(.constdata)
 <LI><a href="#[36]">UIButtonPress</a> from ui.o(i.UIButtonPress) referenced from ui.o(.constdata)
 <LI><a href="#[32]">UIConnectionTimeout</a> from ui.o(i.UIConnectionTimeout) referenced from ui.o(.constdata)
 <LI><a href="#[35]">UIControlType</a> from ui.o(i.UIControlType) referenced from ui.o(.constdata)
 <LI><a href="#[31]">UIDecayMode</a> from ui.o(i.UIDecayMode) referenced from ui.o(.constdata)
 <LI><a href="#[2a]">UIDirectionSet</a> from ui.o(i.UIDirectionSet) referenced from ui.o(.constdata)
 <LI><a href="#[2f]">UIDynamicBrake</a> from ui.o(i.UIDynamicBrake) referenced from ui.o(.constdata)
 <LI><a href="#[26]">UIEncoderPresent</a> from ui.o(i.UIEncoderPresent) referenced from ui.o(.constdata)
 <LI><a href="#[1b]">UIEthernetAccept</a> from ui_ethernet.o(i.UIEthernetAccept) referenced from ui_ethernet.o(i.UIEthernetInit)
 <LI><a href="#[18]">UIEthernetError</a> from ui_ethernet.o(i.UIEthernetError) referenced from ui_ethernet.o(i.UIEthernetAccept)
 <LI><a href="#[19]">UIEthernetPoll</a> from ui_ethernet.o(i.UIEthernetPoll) referenced from ui_ethernet.o(i.UIEthernetAccept)
 <LI><a href="#[17]">UIEthernetReceive</a> from ui_ethernet.o(i.UIEthernetReceive) referenced from ui_ethernet.o(i.UIEthernetAccept)
 <LI><a href="#[1c]">UIEthernetReceiveUDP</a> from ui_ethernet.o(i.UIEthernetReceiveUDP) referenced from ui_ethernet.o(i.UIEthernetInit)
 <LI><a href="#[1a]">UIEthernetSent</a> from ui_ethernet.o(i.UIEthernetSent) referenced from ui_ethernet.o(i.UIEthernetAccept)
 <LI><a href="#[24]">UIFAdjI</a> from ui.o(i.UIFAdjI) referenced 2 times from ui.o(.constdata)
 <LI><a href="#[29]">UIModulationType</a> from ui.o(i.UIModulationType) referenced from ui.o(.constdata)
 <LI><a href="#[34]">UIPAdjI</a> from ui.o(i.UIPAdjI) referenced 2 times from ui.o(.constdata)
 <LI><a href="#[2b]">UIPWMFrequencySet</a> from ui.o(i.UIPWMFrequencySet) referenced from ui.o(.constdata)
 <LI><a href="#[28]">UISensorPolarity</a> from ui.o(i.UISensorPolarity) referenced from ui.o(.constdata)
 <LI><a href="#[27]">UISensorType</a> from ui.o(i.UISensorType) referenced from ui.o(.constdata)
 <LI><a href="#[2d]">UIUpdateRate</a> from ui.o(i.UIUpdateRate) referenced from ui.o(.constdata)
 <LI><a href="#[d]">WatchdogIntHandler</a> from main.o(i.WatchdogIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[1d]">dhcp_recv</a> from lwiplib.o(i.dhcp_recv) referenced from lwiplib.o(i.dhcp_start)
 <LI><a href="#[20]">etharp_output</a> from lwiplib.o(i.etharp_output) referenced from lwiplib.o(i.stellarisif_init)
 <LI><a href="#[1e]">ip_input</a> from lwiplib.o(i.ip_input) referenced from lwiplib.o(i.lwIPPrivateInit)
 <LI><a href="#[11]">lwIPEthernetIntHandler</a> from lwiplib.o(i.lwIPEthernetIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[12]">main</a> from main.o(i.main) referenced from entry7.o(.ARM.Collect$$$$00000007)
 <LI><a href="#[1f]">stellarisif_init</a> from lwiplib.o(i.stellarisif_init) referenced from lwiplib.o(i.lwIPPrivateInit)
 <LI><a href="#[21]">stellarisif_output</a> from lwiplib.o(i.stellarisif_output) referenced from lwiplib.o(i.stellarisif_init)
 <LI><a href="#[23]">tcp_accept_null</a> from lwiplib.o(i.tcp_accept_null) referenced from lwiplib.o(i.tcp_listen_with_backlog)
 <LI><a href="#[22]">tcp_recv_null</a> from lwiplib.o(i.tcp_recv_null) referenced from lwiplib.o(i.tcp_alloc)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))

<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[188]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[40]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[189]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[95]"></a>MainLongMul</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedController
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPowerController
</UL>

<P><STRONG><a name="[3c]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
</UL>

<P><STRONG><a name="[87]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[18a]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[89]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[c2]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlSleep
</UL>

<P><STRONG><a name="[18b]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[18c]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fb]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[191]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>ADC0IntHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc_ctrl.o(i.ADC0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC0IntHandler &rArr; UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetTicks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADCConfigure</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, adc_ctrl.o(i.ADCConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADCConfigure &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDisable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntEnable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UISensorType
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIModulationType
</UL>

<P><STRONG><a name="[4f]"></a>ADCInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, adc_ctrl.o(i.ADCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADCInit &rArr; ADCConfigure &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlADCSpeedSet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>ADCIntDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[4d]"></a>ADCIntEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[51]"></a>ADCProcessorTrigger</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCReadAnalog
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[52]"></a>ADCReadAnalog</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc_ctrl.o(i.ADCReadAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCReadAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[4b]"></a>ADCSequenceConfigure</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[4a]"></a>ADCSequenceDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDisable))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[4c]"></a>ADCSequenceEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>

<P><STRONG><a name="[44]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrapLinear
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrap
</UL>

<P><STRONG><a name="[53]"></a>ADCTickHandler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, adc_ctrl.o(i.ADCTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADCTickHandler &rArr; UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[54]"></a>BrakeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, brake.o(i.BrakeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BrakeInit &rArr; GPIOPinTypeGPIOOutputOD
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>BrakeTick</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, brake.o(i.BrakeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BrakeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[58]"></a>CANBitRateSet</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, can.o(i.CANBitRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANBitRateSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANInit
</UL>

<P><STRONG><a name="[5a]"></a>CANEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, can.o(i.CANEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANInit
</UL>

<P><STRONG><a name="[5b]"></a>CANInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, can.o(i.CANInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANInit &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANInit
</UL>

<P><STRONG><a name="[5c]"></a>CANIntClear</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, can.o(i.CANIntClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANIntClear &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntHandler
</UL>

<P><STRONG><a name="[5d]"></a>CANIntEnable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can.o(i.CANIntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANIntEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANInit
</UL>

<P><STRONG><a name="[10]"></a>CANIntHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ui_can.o(i.CANIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CANIntHandler &rArr; UIButtonPress &rArr; MainStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIButtonPress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CANIntStatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, can.o(i.CANIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANIntStatus &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntHandler
</UL>

<P><STRONG><a name="[5f]"></a>CANMessageGet</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, can.o(i.CANMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CANMessageGet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntHandler
</UL>

<P><STRONG><a name="[60]"></a>CANMessageSet</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, can.o(i.CANMessageSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CANMessageSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANConfigureNetwork
</UL>

<P><STRONG><a name="[61]"></a>CPUUsageInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cpu_usage.o(i.CPUUsageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPUUsageInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralSleepDisable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralClockGating
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[68]"></a>CPUUsageTick</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cpu_usage.o(i.CPUUsageTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPUUsageTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[163]"></a>EthernetConfigSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet.o(i.EthernetConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[164]"></a>EthernetEnable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ethernet.o(i.EthernetEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[162]"></a>EthernetInitExpClk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.EthernetInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[149]"></a>EthernetIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[161]"></a>EthernetIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[165]"></a>EthernetIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[148]"></a>EthernetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernet.o(i.EthernetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[160]"></a>EthernetMACAddrGet</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[14d]"></a>EthernetMACAddrSet</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ethernet.o(i.EthernetMACAddrSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EthernetMACAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>

<P><STRONG><a name="[6a]"></a>EthernetPHYRead</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ethernet.o(i.EthernetPHYRead))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPHYRead
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPHYRead
</UL>

<P><STRONG><a name="[3]"></a>FaultISR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.FaultISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FaultISR &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>FlashErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, flash.o(i.FlashErase))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPBSave
</UL>

<P><STRONG><a name="[f5]"></a>FlashPBGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash_pb.o(i.FlashPBGet))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIParamLoad
</UL>

<P><STRONG><a name="[6e]"></a>FlashPBInit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, flash_pb.o(i.FlashPBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlashPBInit &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUsecSet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>FlashPBSave</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, flash_pb.o(i.FlashPBSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FlashPBSave &rArr; FlashProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgram
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIParamSave
</UL>

<P><STRONG><a name="[73]"></a>FlashProgram</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, flash.o(i.FlashProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlashProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPBSave
</UL>

<P><STRONG><a name="[70]"></a>FlashUsecSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash.o(i.FlashUsecSet))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPBInit
</UL>

<P><STRONG><a name="[d3]"></a>FlashUserGet</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash.o(i.FlashUserGet))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
</UL>

<P><STRONG><a name="[6]"></a>GPIOBIntHandler</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, hall_ctrl.o(i.GPIOBIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIOBIntHandler &rArr; UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPunchWatchdog
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetTicks
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>GPIOCIntHandler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, speed_sense.o(i.GPIOCIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOCIntHandler &rArr; SpeedNewValue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPunchWatchdog
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedNewValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
</UL>

<P><STRONG><a name="[85]"></a>GPIOIntTypeSet</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[7a]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[74]"></a>GPIOPinIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOCIntHandler
</UL>

<P><STRONG><a name="[83]"></a>GPIOPinIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
</UL>

<P><STRONG><a name="[82]"></a>GPIOPinIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[76]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[78]"></a>GPIOPinTypeCAN</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeCAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeCAN
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANInit
</UL>

<P><STRONG><a name="[7b]"></a>GPIOPinTypeEthernetLED</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeEthernetLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeEthernetLED
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
</UL>

<P><STRONG><a name="[7c]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[7d]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[55]"></a>GPIOPinTypeGPIOOutputOD</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutputOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutputOD
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeInit
</UL>

<P><STRONG><a name="[7e]"></a>GPIOPinTypePWM</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypePWM
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[7f]"></a>GPIOPinTypeQEI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeQEI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeQEI
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[80]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeUART
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[56]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeTick
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UILEDBlink
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[81]"></a>HallConfigure</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hall_ctrl.o(i.HallConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HallConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntDisable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntClear
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UISensorType
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIModulationType
</UL>

<P><STRONG><a name="[84]"></a>HallInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hall_ctrl.o(i.HallInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HallInit &rArr; GPIOPinTypeGPIOInput
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>HallTickHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hall_ctrl.o(i.HallTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HallTickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[4]"></a>IntDefaultHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.IntDefaultHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IntDefaultHandler &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IntDisable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOCIntHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetUpdateRate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMReducePeriodCount
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdatePAdjI
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdateFAdjI
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetPWMFrequency
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetDirection
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
</UL>

<P><STRONG><a name="[4e]"></a>IntEnable</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetUpdateRate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMReducePeriodCount
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdatePAdjI
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdateFAdjI
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetPWMFrequency
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetDirection
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[6b]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_packet
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[88]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>

<P><STRONG><a name="[156]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>MainClearFaults</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.MainClearFaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainClearFaults &rArr; UIFaultLEDBlink &rArr; UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>MainEmergencyStop</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, main.o(i.MainEmergencyStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEmergencyStop
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainCheckFaults
</UL>

<P><STRONG><a name="[99]"></a>MainIsFaulted</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.MainIsFaulted))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOn
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
</UL>

<P><STRONG><a name="[43]"></a>MainIsReverse</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.MainIsReverse))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrap
</UL>

<P><STRONG><a name="[42]"></a>MainIsRunning</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.MainIsRunning))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallTickHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrapLinear
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrap
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntSineLinear
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntSine
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIParamSave
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIParamLoad
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIButtonPress
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UISensorType
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UISensorPolarity
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIPWMFrequencySet
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIModulationType
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEncoderPresent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIControlType
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
</UL>

<P><STRONG><a name="[45]"></a>MainIsStartup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.MainIsStartup))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrap
</UL>

<P><STRONG><a name="[a]"></a>MainMillisecondTick</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, main.o(i.MainMillisecondTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MainMillisecondTick &rArr; MainStartupHandler &rArr; MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeTick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedController
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPowerController
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPowerHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainCheckFaults
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>MainPowerController</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.MainPowerController))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MainPowerController
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLongMul
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[75]"></a>MainPunchWatchdog</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.MainPunchWatchdog))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOCIntHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0AIntHandler
</UL>

<P><STRONG><a name="[98]"></a>MainRun</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(i.MainRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MainRun &rArr; PWMOutputPrecharge &rArr; PWMClearDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsFaulted
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRun
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIButtonPress
</UL>

<P><STRONG><a name="[9b]"></a>MainSetDirection</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.MainSetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainSetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDirectionSet
</UL>

<P><STRONG><a name="[8c]"></a>MainSetFault</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.MainSetFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainSetFault &rArr; UIFaultLEDBlink &rArr; UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEmergencyStop
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainCheckFaults
</UL>

<P><STRONG><a name="[9c]"></a>MainSetPWMFrequency</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.MainSetPWMFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MainSetPWMFrequency &rArr; PWMSetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIPWMFrequencySet
</UL>

<P><STRONG><a name="[33]"></a>MainSetPower</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.MainSetPower))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>MainSetSpeed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(i.MainSetSpeed))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>MainSpeedController</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(i.MainSpeedController))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MainSpeedController
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLongMul
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[9e]"></a>MainStop</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.MainStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MainStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIStop
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIButtonPress
</UL>

<P><STRONG><a name="[9f]"></a>MainUpdateFAdjI</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.MainUpdateFAdjI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainUpdateFAdjI
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFAdjI
</UL>

<P><STRONG><a name="[a0]"></a>MainUpdatePAdjI</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.MainUpdatePAdjI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MainUpdatePAdjI
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIPAdjI
</UL>

<P><STRONG><a name="[f6]"></a>MainUpgrade</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.MainUpgrade))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIUpgrade
</UL>

<P><STRONG><a name="[9]"></a>MainWaveformTick</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, main.o(i.MainWaveformTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MainWaveformTick &rArr; SineModulate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SineModulate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMReducePeriodCount
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGetPeriodCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NmiSR</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.NmiSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NmiSR &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PWM0IntHandler</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, pwm_ctrl.o(i.PWM0IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PWM0IntHandler &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenIntClear
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMReducePeriodCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>PWMClearDeadBand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pwm_ctrl.o(i.PWMClearDeadBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMClearDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDeadBandDisable
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetMinPulseWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[a9]"></a>PWMDeadBandDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(i.PWMDeadBandDisable))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClearDeadBand
</UL>

<P><STRONG><a name="[b5]"></a>PWMDeadBandEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMDeadBandEnable))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDeadBand
</UL>

<P><STRONG><a name="[ab]"></a>PWMGenConfigure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[ac]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[a4]"></a>PWMGenIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i.PWMGenIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[ae]"></a>PWMGenIntTrigEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenIntTrigEnable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[a5]"></a>PWMGenPeriodSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[a1]"></a>PWMGetPeriodCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm_ctrl.o(i.PWMGetPeriodCount))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainWaveformTick
</UL>

<P><STRONG><a name="[aa]"></a>PWMInit</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWMInit &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSyncTimeBase
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputInvert
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputFault
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMIntEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenIntTrigEnable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenIntClear
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClearDeadBand
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>PWMIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(i.PWMIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[b0]"></a>PWMOutputFault</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputFault))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[b1]"></a>PWMOutputInvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputInvert))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[6c]"></a>PWMOutputOff</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMOutputOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClearDeadBand
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntHandler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPowerHandler
</UL>

<P><STRONG><a name="[96]"></a>PWMOutputOn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pwm_ctrl.o(i.PWMOutputOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWMOutputOn &rArr; PWMSetDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDeadBand
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsFaulted
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
</UL>

<P><STRONG><a name="[9a]"></a>PWMOutputPrecharge</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMOutputPrecharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWMOutputPrecharge &rArr; PWMClearDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSyncUpdate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClearDeadBand
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsFaulted
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
</UL>

<P><STRONG><a name="[a7]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOn
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[b4]"></a>PWMOutputTrapezoid</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMOutputTrapezoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMOutputTrapezoid
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsFaulted
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
</UL>

<P><STRONG><a name="[b2]"></a>PWMPulseWidthSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
</UL>

<P><STRONG><a name="[a2]"></a>PWMReducePeriodCount</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pwm_ctrl.o(i.PWMReducePeriodCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMReducePeriodCount
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainWaveformTick
</UL>

<P><STRONG><a name="[2c]"></a>PWMSetDeadBand</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMSetDeadBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMSetDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMDeadBandEnable
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetMinPulseWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>PWMSetDutyCycle</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pwm_ctrl.o(i.PWMSetDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMSetDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainWaveformTick
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
</UL>

<P><STRONG><a name="[9d]"></a>PWMSetFrequency</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, pwm_ctrl.o(i.PWMSetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMSetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetPWMFrequency
</UL>

<P><STRONG><a name="[2e]"></a>PWMSetMinPulseWidth</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, pwm_ctrl.o(i.PWMSetMinPulseWidth))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDeadBand
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMClearDeadBand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>PWMSetUpdateRate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pwm_ctrl.o(i.PWMSetUpdateRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWMSetUpdateRate
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIUpdateRate
</UL>

<P><STRONG><a name="[ad]"></a>PWMSyncTimeBase</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(i.PWMSyncTimeBase))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[b3]"></a>PWMSyncUpdate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(i.PWMSyncUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMUpdateDutyCycle
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputPrecharge
</UL>

<P><STRONG><a name="[bb]"></a>QEIConfigure</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, qei.o(i.QEIConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[bd]"></a>QEIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qei.o(i.QEIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[b7]"></a>QEIIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qei.o(i.QEIIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntHandler
</UL>

<P><STRONG><a name="[bf]"></a>QEIIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qei.o(i.QEIIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[b]"></a>QEIIntHandler</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, speed_sense.o(i.QEIIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QEIIntHandler &rArr; SpeedNewValue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPunchWatchdog
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIVelocityGet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntClear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedNewValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>QEIVelocityConfigure</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, qei.o(i.QEIVelocityConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[be]"></a>QEIVelocityEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qei.o(i.QEIVelocityEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
</UL>

<P><STRONG><a name="[b8]"></a>QEIVelocityGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qei.o(i.QEIVelocityGet))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntHandler
</UL>

<P><STRONG><a name="[a3]"></a>SineModulate</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, sinemod.o(i.SineModulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SineModulate
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sine
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainWaveformTick
</UL>

<P><STRONG><a name="[ba]"></a>SpeedSenseInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, speed_sense.o(i.SpeedSenseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpeedSenseInit &rArr; GPIOPinTypeQEI
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIVelocityEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIVelocityConfigure
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntEnable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIEnable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIConfigure
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>SysCtlADCSpeedSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlADCSpeedSet))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[6f]"></a>SysCtlClockGet</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPBInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_init
</UL>

<P><STRONG><a name="[c0]"></a>SysCtlClockSet</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>SysCtlLDOSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlLDOSet))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>SysCtlPeripheralClockGating</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralClockGating))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUUsageInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUUsageInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>

<P><STRONG><a name="[64]"></a>SysCtlPeripheralSleepDisable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralSleepDisable))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUUsageInit
</UL>

<P><STRONG><a name="[155]"></a>SysCtlPeripheralSleepEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralSleepEnable))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>SysCtlSleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlSleep))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[15a]"></a>SysTickIntDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[5]"></a>SysTickIntHandler</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, ui.o(i.SysTickIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysTickIntHandler &rArr; ADCTickHandler &rArr; UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallTickHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUUsageTick
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTickHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCReadAnalog
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIOnboardSwitchDebouncer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetTick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetSendRealTimeData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[e]"></a>Timer0AIntHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(i.Timer0AIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer0AIntHandler &rArr; TrapModulate &rArr; PWMOutputTrapezoid
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPunchWatchdog
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Timer1AIntHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui.o(i.Timer1AIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1AIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TimerConfigure</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUUsageInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUUsageInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[c6]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1AIntHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0AIntHandler
</UL>

<P><STRONG><a name="[f4]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUUsageInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[69]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUUsageTick
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIGetTicks
</UL>

<P><STRONG><a name="[46]"></a>TrapModulate</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, trapmod.o(i.TrapModulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TrapModulate &rArr; PWMOutputTrapezoid
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsReverse
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputTrapezoid
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntTrapLinear
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0AIntHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStartupHandler
</UL>

<P><STRONG><a name="[36]"></a>UIButtonPress</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ui.o(i.UIButtonPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UIButtonPress &rArr; MainStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDirectionSet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>UICANInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ui_can.o(i.UICANInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UICANInit &rArr; UICANConfigureNetwork &rArr; CANMessageSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANConfigureNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[c9]"></a>UIEmergencyStop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ui.o(i.UIEmergencyStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UIEmergencyStop &rArr; MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetFault
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
</UL>

<P><STRONG><a name="[d2]"></a>UIEthernetInit</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ui_ethernet.o(i.UIEthernetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = UIEthernetInit &rArr; lwIPInit &rArr; lwIPPrivateInit &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUserGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[c5]"></a>UIEthernetSendRealTimeData</STRONG> (Thumb, 134 bytes, Stack size 36 bytes, ui_ethernet.o(i.UIEthernetSendRealTimeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UIEthernetSendRealTimeData
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[c3]"></a>UIEthernetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ui_ethernet.o(i.UIEthernetTick))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[6d]"></a>UIFaultLEDBlink</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ui.o(i.UIFaultLEDBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIFaultLEDBlink &rArr; UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UILEDBlink
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetFault
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainClearFaults
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>

<P><STRONG><a name="[41]"></a>UIGetTicks</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ui.o(i.UIGetTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCTickHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0IntHandler
</UL>

<P><STRONG><a name="[ef]"></a>UIInit</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, ui.o(i.UIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = UIInit &rArr; UIEthernetInit &rArr; lwIPInit &rArr; lwIPPrivateInit &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUUsageInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIOnboardInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIParamLoad
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>UIOnboardInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ui_onboard.o(i.UIOnboardInit))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[c4]"></a>UIOnboardSwitchDebouncer</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, ui_onboard.o(i.UIOnboardSwitchDebouncer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UIOnboardSwitchDebouncer
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
</UL>

<P><STRONG><a name="[e7]"></a>UIParamLoad</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, ui.o(i.UIParamLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UIParamLoad
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPBGet
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
</UL>

<P><STRONG><a name="[e8]"></a>UIParamSave</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui.o(i.UIParamSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UIParamSave &rArr; FlashPBSave &rArr; FlashProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPBSave
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
</UL>

<P><STRONG><a name="[e9]"></a>UIRun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ui.o(i.UIRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UIRun &rArr; MainRun &rArr; PWMOutputPrecharge &rArr; PWMClearDeadBand
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
</UL>

<P><STRONG><a name="[8d]"></a>UIRunLEDBlink</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ui.o(i.UIRunLEDBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIRunLEDBlink &rArr; UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UILEDBlink
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainRun
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSpeedHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPowerHandler
</UL>

<P><STRONG><a name="[ea]"></a>UIStop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ui.o(i.UIStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UIStop &rArr; MainStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainStop
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
</UL>

<P><STRONG><a name="[e3]"></a>UIUpgrade</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ui.o(i.UIUpgrade))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
</UL>

<P><STRONG><a name="[158]"></a>WatchdogEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogEnable))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>WatchdogIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntHandler
</UL>

<P><STRONG><a name="[d]"></a>WatchdogIntHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.WatchdogIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WatchdogIntHandler &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntClear
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetFault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>WatchdogReloadSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogReloadSet))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPunchWatchdog
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainPrechargeHandler
</UL>

<P><STRONG><a name="[159]"></a>WatchdogResetDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogResetDisable))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>WatchdogResetEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, watchdog.o(i.WatchdogResetEnable))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[195]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[196]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[fa]"></a>autoip_arp_reply</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lwiplib.o(i.autoip_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = autoip_arp_reply &rArr; autoip_arp_announce &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_announce
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[fc]"></a>autoip_start</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lwiplib.o(i.autoip_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = autoip_start &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start_probing
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>

<P><STRONG><a name="[100]"></a>autoip_stop</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lwiplib.o(i.autoip_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = autoip_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[101]"></a>autoip_tmr</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, lwiplib.o(i.autoip_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = autoip_tmr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_announce
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[108]"></a>dhcp_arp_reply</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[10e]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[11b]"></a>dhcp_fine_tmr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[125]"></a>dhcp_release</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[110]"></a>dhcp_renew</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[126]"></a>dhcp_start</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
</UL>

<P><STRONG><a name="[129]"></a>dhcp_stop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[12b]"></a>etharp_arp_input</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, lwiplib.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = etharp_arp_input &rArr; autoip_arp_reply &rArr; autoip_arp_announce &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[12d]"></a>etharp_ip_input</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwiplib.o(i.etharp_ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = etharp_ip_input &rArr; update_arp_entry &rArr; find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[20]"></a>etharp_output</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, lwiplib.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.stellarisif_init)
</UL>
<P><STRONG><a name="[10d]"></a>etharp_query</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, lwiplib.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[f9]"></a>etharp_raw</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lwiplib.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_announce
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[132]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lwiplib.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[136]"></a>etharp_tmr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lwiplib.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = etharp_tmr &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[138]"></a>ethernet_input</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lwiplib.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
</UL>

<P><STRONG><a name="[13a]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwiplib.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[13c]"></a>icmp_input</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, lwiplib.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[13e]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwiplib.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[13d]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lwiplib.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[143]"></a>inet_chksum_pseudo</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lwiplib.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[12f]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lwiplib.o(i.ip_addr_isbroadcast))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[1e]"></a>ip_input</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, lwiplib.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.lwIPPrivateInit)
</UL>
<P><STRONG><a name="[141]"></a>ip_output</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lwiplib.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[13f]"></a>ip_output_if</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lwiplib.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[147]"></a>ip_route</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, lwiplib.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[11]"></a>lwIPEthernetIntHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwiplib.o(i.lwIPEthernetIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lwIPEthernetIntHandler &rArr; stellarisif_interrupt &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>lwIPHostTimerHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui_ethernet.o(i.lwIPHostTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lwIPHostTimerHandler &rArr; UIEthernetTransmit &rArr; tcp_write &rArr; tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[d4]"></a>lwIPInit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lwiplib.o(i.lwIPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lwIPInit &rArr; lwIPPrivateInit &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
</UL>

<P><STRONG><a name="[eb]"></a>lwIPTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwiplib.o(i.lwIPTimer))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetTick
</UL>

<P><STRONG><a name="[14f]"></a>lwip_init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lwiplib.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_init &rArr; memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
</UL>

<P><STRONG><a name="[12]"></a>main</STRONG> (Thumb, 514 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; UIInit &rArr; UIEthernetInit &rArr; lwIPInit &rArr; lwIPPrivateInit &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPBInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralClockGating
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BrakeInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogResetEnable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogResetDisable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogEnable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntDisable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlSleep
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralSleepEnable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlLDOSet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSenseInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainClearFaults
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[11e]"></a>mem_free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lwiplib.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[152]"></a>mem_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lwiplib.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[ff]"></a>mem_malloc</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lwiplib.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>

<P><STRONG><a name="[15c]"></a>mem_realloc</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lwiplib.o(i.mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mem_realloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[139]"></a>memp_free</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lwiplib.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[153]"></a>memp_init</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, lwiplib.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[135]"></a>memp_malloc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lwiplib.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memp_malloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[150]"></a>netif_add</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwiplib.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
</UL>

<P><STRONG><a name="[15d]"></a>netif_set_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwiplib.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[fd]"></a>netif_set_down</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_down))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>

<P><STRONG><a name="[104]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[102]"></a>netif_set_ipaddr</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lwiplib.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[103]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[105]"></a>netif_set_up</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lwiplib.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPPrivateInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>

<P><STRONG><a name="[e1]"></a>pbuf_alloc</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, lwiplib.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetReceiveUDP
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_receive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[15f]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[15e]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[171]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwiplib.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[133]"></a>pbuf_copy</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lwiplib.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[12a]"></a>pbuf_copy_partial</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lwiplib.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
</UL>

<P><STRONG><a name="[e0]"></a>pbuf_free</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lwiplib.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetReceiveUDP
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetReceive
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_transmit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[12e]"></a>pbuf_header</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[116]"></a>pbuf_realloc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lwiplib.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_realloc &rArr; mem_realloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[134]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwiplib.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_ref &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[144]"></a>raw_input</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, lwiplib.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[b9]"></a>sine</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sine.o(i.sine))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SineModulate
</UL>

<P><STRONG><a name="[1f]"></a>stellarisif_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lwiplib.o(i.stellarisif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stellarisif_init &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetMACAddrGet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntStatus
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntEnable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntDisable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetIntClear
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetInitExpClk
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetEnable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetConfigSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.lwIPPrivateInit)
</UL>
<P><STRONG><a name="[14a]"></a>stellarisif_interrupt</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lwiplib.o(i.stellarisif_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = stellarisif_interrupt &rArr; ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_transmit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_receive
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_packet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[107]"></a>sys_arch_unprotect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwiplib.o(i.sys_arch_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_arch_unprotect &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_packet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[dd]"></a>tcp_abandon</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, lwiplib.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetPoll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[d8]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
</UL>

<P><STRONG><a name="[16b]"></a>tcp_alloc</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
</UL>

<P><STRONG><a name="[cc]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetClose
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetAccept
</UL>

<P><STRONG><a name="[d6]"></a>tcp_bind</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcp_bind &rArr; tcp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
</UL>

<P><STRONG><a name="[d1]"></a>tcp_close</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetClose
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[16f]"></a>tcp_eff_send_mss</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[170]"></a>tcp_enqueue</STRONG> (Thumb, 786 bytes, Stack size 64 bytes, lwiplib.o(i.tcp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[ce]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetClose
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetAccept
</UL>

<P><STRONG><a name="[172]"></a>tcp_fasttmr</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[146]"></a>tcp_input</STRONG> (Thumb, 840 bytes, Stack size 48 bytes, lwiplib.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[177]"></a>tcp_keepalive</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[d7]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_listen_with_backlog &rArr; memp_malloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
</UL>

<P><STRONG><a name="[d5]"></a>tcp_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
</UL>

<P><STRONG><a name="[16c]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[ed]"></a>tcp_output</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetTransmit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[17e]"></a>tcp_pcb_purge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>

<P><STRONG><a name="[168]"></a>tcp_pcb_remove</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcbs_sane
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[176]"></a>tcp_pcbs_sane</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_pcbs_sane))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[cf]"></a>tcp_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetClose
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetAccept
</UL>

<P><STRONG><a name="[cd]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetClose
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetAccept
</UL>

<P><STRONG><a name="[22]"></a>tcp_recv_null</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[de]"></a>tcp_recved</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetReceive
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[180]"></a>tcp_rexmit</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lwiplib.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</UL>

<P><STRONG><a name="[181]"></a>tcp_rexmit_fast</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[184]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[16a]"></a>tcp_rst</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, lwiplib.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[183]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[17b]"></a>tcp_seg_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[169]"></a>tcp_segs_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[16e]"></a>tcp_send_ctrl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_send_ctrl &rArr; tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[17c]"></a>tcp_send_empty_ack</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[d0]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetClose
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetAccept
</UL>

<P><STRONG><a name="[cb]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_setprio))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetAccept
</UL>

<P><STRONG><a name="[186]"></a>tcp_slowtmr</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, lwiplib.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[151]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwiplib.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPServiceTimers
</UL>

<P><STRONG><a name="[182]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[ec]"></a>tcp_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_write &rArr; tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetTransmit
</UL>

<P><STRONG><a name="[187]"></a>tcp_zero_window_probe</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[db]"></a>udp_bind</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, lwiplib.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[dc]"></a>udp_connect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lwiplib.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[145]"></a>udp_input</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, lwiplib.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[d9]"></a>udp_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwiplib.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[da]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetInit
</UL>

<P><STRONG><a name="[127]"></a>udp_remove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lwiplib.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_remove &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[e2]"></a>udp_sendto</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lwiplib.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetReceiveUDP
</UL>

<P><STRONG><a name="[117]"></a>udp_sendto_if</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, lwiplib.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[0]"></a>ADC0IntIdle</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, adc_ctrl.o(i.ADC0IntIdle))
<BR>[Address Reference Count : 2]<UL><LI> adc_ctrl.o(i.ADCConfigure)
<LI> adc_ctrl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>ADC0IntSine</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, adc_ctrl.o(i.ADC0IntSine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC0IntSine
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_ctrl.o(i.ADCConfigure)
</UL>
<P><STRONG><a name="[16]"></a>ADC0IntSineLinear</STRONG> (Thumb, 718 bytes, Stack size 40 bytes, adc_ctrl.o(i.ADC0IntSineLinear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC0IntSineLinear
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_ctrl.o(i.ADCConfigure)
</UL>
<P><STRONG><a name="[13]"></a>ADC0IntTrap</STRONG> (Thumb, 858 bytes, Stack size 40 bytes, adc_ctrl.o(i.ADC0IntTrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC0IntTrap &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsStartup
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsReverse
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_ctrl.o(i.ADCConfigure)
</UL>
<P><STRONG><a name="[14]"></a>ADC0IntTrapLinear</STRONG> (Thumb, 774 bytes, Stack size 40 bytes, adc_ctrl.o(i.ADC0IntTrapLinear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC0IntTrapLinear &rArr; TrapModulate &rArr; PWMOutputTrapezoid
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_ctrl.o(i.ADCConfigure)
</UL>
<P><STRONG><a name="[f8]"></a>autoip_arp_announce</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lwiplib.o(i.autoip_arp_announce))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = autoip_arp_announce &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_arp_reply
</UL>

<P><STRONG><a name="[fe]"></a>autoip_start_probing</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lwiplib.o(i.autoip_start_probing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = autoip_start_probing
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>

<P><STRONG><a name="[106]"></a>dequeue_packet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwiplib.o(i.dequeue_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dequeue_packet &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
</UL>

<P><STRONG><a name="[10a]"></a>dhcp_bind</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lwiplib.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[10c]"></a>dhcp_check</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[111]"></a>dhcp_create_request</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_create_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dhcp_create_request &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[109]"></a>dhcp_decline</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[118]"></a>dhcp_delete_request</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_delete_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dhcp_delete_request &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[119]"></a>dhcp_discover</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[11d]"></a>dhcp_free_reply</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_free_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcp_free_reply &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[121]"></a>dhcp_get_option_long</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_get_option_long))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[120]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_get_option_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_get_option_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[11f]"></a>dhcp_handle_ack</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, lwiplib.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_handle_ack &rArr; dhcp_get_option_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[112]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[113]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[114]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[11a]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[115]"></a>dhcp_option_trailer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[10f]"></a>dhcp_rebind</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[122]"></a>dhcp_reboot</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1d]"></a>dhcp_recv</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[124]"></a>dhcp_select</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[10b]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwiplib.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[11c]"></a>dhcp_timeout</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, lwiplib.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[123]"></a>dhcp_unfold_reply</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lwiplib.o(i.dhcp_unfold_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dhcp_unfold_reply &rArr; dhcp_free_reply &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[130]"></a>etharp_send_ip</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwiplib.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[131]"></a>find_entry</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, lwiplib.o(i.find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[137]"></a>free_etharp_q</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwiplib.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[13b]"></a>icmp_send_response</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, lwiplib.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[14e]"></a>lwIPPrivateInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lwiplib.o(i.lwIPPrivateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lwIPPrivateInit &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_start
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPInit
</UL>

<P><STRONG><a name="[14b]"></a>lwIPServiceTimers</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lwiplib.o(i.lwIPServiceTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lwIPServiceTimers &rArr; dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPHostTimerHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetPHYRead
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoip_tmr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPEthernetIntHandler
</UL>

<P><STRONG><a name="[142]"></a>lwip_standard_chksum</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lwiplib.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[15b]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, lwiplib.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[21]"></a>stellarisif_output</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lwiplib.o(i.stellarisif_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stellarisif_output &rArr; stellarisif_transmit &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_transmit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.stellarisif_init)
</UL>
<P><STRONG><a name="[166]"></a>stellarisif_receive</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwiplib.o(i.stellarisif_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stellarisif_receive &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
</UL>

<P><STRONG><a name="[167]"></a>stellarisif_transmit</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lwiplib.o(i.stellarisif_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stellarisif_transmit &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_output
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stellarisif_interrupt
</UL>

<P><STRONG><a name="[23]"></a>tcp_accept_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwiplib.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> lwiplib.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[174]"></a>tcp_listen_input</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[16d]"></a>tcp_new_port</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, lwiplib.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[17a]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lwiplib.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[17d]"></a>tcp_output_segment</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[178]"></a>tcp_output_set_header</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, lwiplib.o(i.tcp_output_set_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_output_set_header
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[179]"></a>tcp_parseopt</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, lwiplib.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[175]"></a>tcp_process</STRONG> (Thumb, 788 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_process &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[17f]"></a>tcp_receive</STRONG> (Thumb, 1522 bytes, Stack size 32 bytes, lwiplib.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_receive &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[173]"></a>tcp_timewait_input</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lwiplib.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[12c]"></a>update_arp_entry</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, lwiplib.o(i.update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = update_arp_entry &rArr; find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[8a]"></a>MainCheckFaults</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, main.o(i.MainCheckFaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MainCheckFaults &rArr; MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetFault
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[91]"></a>MainPowerHandler</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, main.o(i.MainPowerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MainPowerHandler &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[8f]"></a>MainPrechargeHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, main.o(i.MainPrechargeHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MainPrechargeHandler &rArr; GPIOBIntHandler &rArr; UIGetTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBIntHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOn
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[92]"></a>MainSpeedHandler</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, main.o(i.MainSpeedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MainSpeedHandler &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[90]"></a>MainStartupHandler</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, main.o(i.MainStartupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MainStartupHandler &rArr; MainEmergencyStop &rArr; PWMOutputOff &rArr; PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrapModulate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetDutyCycle
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0AIntHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetFault
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEmergencyStop
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMillisecondTick
</UL>

<P><STRONG><a name="[a6]"></a>PWMUpdateDutyCycle</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, pwm_ctrl.o(i.PWMUpdateDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWMUpdateDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSyncUpdate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0IntHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputOff
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMInit
</UL>

<P><STRONG><a name="[77]"></a>SpeedNewValue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, speed_sense.o(i.SpeedNewValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpeedNewValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEIIntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOCIntHandler
</UL>

<P><STRONG><a name="[37]"></a>UIButtonHold</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ui.o(i.UIButtonHold))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>UIConnectionTimeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ui.o(i.UIConnectionTimeout))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>UIControlType</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ui.o(i.UIControlType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIControlType
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>UIDecayMode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ui.o(i.UIDecayMode))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>UIDirectionSet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ui.o(i.UIDirectionSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIDirectionSet &rArr; MainSetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIButtonPress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>UIDynamicBrake</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ui.o(i.UIDynamicBrake))
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>UIEncoderPresent</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ui.o(i.UIEncoderPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIEncoderPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>UIFAdjI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui.o(i.UIFAdjI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIFAdjI &rArr; MainUpdateFAdjI
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdateFAdjI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>UILEDBlink</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ui.o(i.UILEDBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UILEDBlink
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRunLEDBlink
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIFaultLEDBlink
</UL>

<P><STRONG><a name="[29]"></a>UIModulationType</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ui.o(i.UIModulationType))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UIModulationType &rArr; ADCConfigure &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>UIPAdjI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui.o(i.UIPAdjI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIPAdjI &rArr; MainUpdatePAdjI
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUpdatePAdjI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>UIPWMFrequencySet</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, ui.o(i.UIPWMFrequencySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UIPWMFrequencySet &rArr; MainSetPWMFrequency &rArr; PWMSetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetPWMFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>UISensorPolarity</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ui.o(i.UISensorPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UISensorPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>UISensorType</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ui.o(i.UISensorType))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UISensorType &rArr; ADCConfigure &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HallConfigure
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainIsRunning
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>UIUpdateRate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui.o(i.UIUpdateRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIUpdateRate &rArr; PWMSetUpdateRate
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMSetUpdateRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>UICANConfigureNetwork</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ui_can.o(i.UICANConfigureNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UICANConfigureNetwork &rArr; CANMessageSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UICANInit
</UL>

<P><STRONG><a name="[1b]"></a>UIEthernetAccept</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ui_ethernet.o(i.UIEthernetAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = UIEthernetAccept &rArr; UIEthernetClose &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetClose
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_ethernet.o(i.UIEthernetInit)
</UL>
<P><STRONG><a name="[ca]"></a>UIEthernetClose</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ui_ethernet.o(i.UIEthernetClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UIEthernetClose &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetReceive
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetAccept
</UL>

<P><STRONG><a name="[18]"></a>UIEthernetError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_ethernet.o(i.UIEthernetError))
<BR>[Address Reference Count : 1]<UL><LI> ui_ethernet.o(i.UIEthernetAccept)
</UL>
<P><STRONG><a name="[e5]"></a>UIEthernetFindParameter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ui_ethernet.o(i.UIEthernetFindParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UIEthernetFindParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
</UL>

<P><STRONG><a name="[19]"></a>UIEthernetPoll</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ui_ethernet.o(i.UIEthernetPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UIEthernetPoll &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_ethernet.o(i.UIEthernetAccept)
</UL>
<P><STRONG><a name="[e6]"></a>UIEthernetRangeCheck</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, ui_ethernet.o(i.UIEthernetRangeCheck))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
</UL>

<P><STRONG><a name="[17]"></a>UIEthernetReceive</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ui_ethernet.o(i.UIEthernetReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = UIEthernetReceive &rArr; UIEthernetScanReceive &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetClose
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_ethernet.o(i.UIEthernetAccept)
</UL>
<P><STRONG><a name="[1c]"></a>UIEthernetReceiveUDP</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ui_ethernet.o(i.UIEthernetReceiveUDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UIEthernetReceiveUDP &rArr; udp_sendto &rArr; udp_sendto_if &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_ethernet.o(i.UIEthernetInit)
</UL>
<P><STRONG><a name="[df]"></a>UIEthernetScanReceive</STRONG> (Thumb, 932 bytes, Stack size 40 bytes, ui_ethernet.o(i.UIEthernetScanReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = UIEthernetScanReceive &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetTransmit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetRangeCheck
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetFindParameter
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIUpgrade
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIRun
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIParamSave
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIParamLoad
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEmergencyStop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetReceive
</UL>

<P><STRONG><a name="[1a]"></a>UIEthernetSent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_ethernet.o(i.UIEthernetSent))
<BR>[Address Reference Count : 1]<UL><LI> ui_ethernet.o(i.UIEthernetAccept)
</UL>
<P><STRONG><a name="[e4]"></a>UIEthernetTransmit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ui_ethernet.o(i.UIEthernetTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UIEthernetTransmit &rArr; tcp_write &rArr; tcp_enqueue &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIEthernetScanReceive
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwIPHostTimerHandler
</UL>

<P><STRONG><a name="[59]"></a>CANRegRead</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, can.o(i.CANRegRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
